import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, tap, catchError } from 'rxjs';
import { IYandexResponse } from './types';
import { Platform } from '@ionic/angular/standalone';
import { environment } from 'src/environments/environment';
import { UserStateService } from 'src/app/state/user-state.service';
import { DataStateService } from 'src/app/state/data-state.service';
import { UserDataService } from 'src/app/services/user-data.service';
import { Router } from '@angular/router';
import { Capacitor } from '@capacitor/core';
import { Browser } from '@capacitor/browser';
import { GoogleAuth, User } from '@codetrix-studio/capacitor-google-auth';
import { isPlatform } from '@ionic/angular/standalone';
import { registerPlugin } from '@capacitor/core';
import { GoogleAuthService } from './google-auth.service';

import { initializeApp } from 'firebase/app';
import { Auth, getAuth, signInWithEmailAndPassword } from 'firebase/auth';
import { jwtDecode } from 'jwt-decode';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  googleUser: any | null = null;
  baseUrl = environment.base;
  user: any | null = null;
  firebaseApp = initializeApp(environment.firebase);
  private auth: Auth = getAuth(this.firebaseApp);
  YandexLogin: any = registerPlugin('YandexLoginPlugin');

  constructor(
    private http: HttpClient,
    public userState: UserStateService,
    private dataStateService: DataStateService,
    private userDataService: UserDataService,
    public router: Router,
    private platform: Platform,
    private googleAuthService: GoogleAuthService
  ) {
    initializeApp(environment.firebase);
    this.initializeGoogleAuth();
  }

  async yandexSignIn() {
    console.log('yandexLogin ==> ', Capacitor.isNativePlatform());
    
    // –°–æ–∑–¥–∞–µ–º callback URL
    const callbackUrl = this.getCallbackUrl();
    const authUrl = `https://oauth.yandex.ru/authorize?response_type=token&client_id=${environment.yandexClientId}&redirect_uri=${encodeURIComponent(callbackUrl)}`;
    
    if (Capacitor.isNativePlatform()) {
      // –î–ª—è iOS –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å callback URL
      await Browser.open({
        url: authUrl,
        windowName: '_self'
      });
    } else {
      // –î–ª—è –≤–µ–±–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      window.open(authUrl, '_self');
    }
  }

  private getCallbackUrl(): string {
    // –°–æ–∑–¥–∞–µ–º callback URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (Capacitor.isNativePlatform()) {
      // –î–ª—è iOS –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ø–Ω–¥–µ–∫—Å—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
      return window.location.origin + '/auth/callback?platform=ios';
    } else {
      // –î–ª—è –≤–µ–±–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π URL —Å callback –º–∞—Ä—à—Ä—É—Ç–æ–º
      return window.location.origin + '/auth/callback';
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  processYandexToken(accessToken: string): Observable<any> {
    console.log('üîç Processing Yandex token:', accessToken);
    console.log('üîç API endpoint:', environment.base + 'users/auth/');
    
    return this.http
      .post<{ status: string; data: string }>(environment.base + 'users/auth/', {
        accessToken: accessToken,
      })
      .pipe(
        tap((response) => {
          console.log('üîç Yandex auth response:', response);
          const jwt = response.data;
          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          this.clearUserData();
          
          this.userState.token$.next(jwt);
          this.userState.me$.next(jwtDecode(jwt));
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
          this.userDataService.forceRefreshUserData().subscribe(() => {
            this.router.navigate(['tabs', 'all']);
          });
        }),
        catchError((error: any) => {
          console.error('üîç Error processing Yandex token:', error);
          throw error;
        })
      );
  }

  getAndSaveUserData(accessToken: string): Observable<any> {
    return this.http.post<{ status: string; data: string }>(environment.base + 'users/auth/', {
      accessToken,
    }).pipe(
      tap((response) => {
        const jwt = response.data;
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.clearUserData();
        
        this.userState.token$.next(jwt);
        this.userState.me$.next(jwtDecode(jwt));
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userDataService.forceRefreshUserData().subscribe();
      })
    );
  }

  logout() {
    this.userState.me$.next(null);
    this.userState.token$.next(null);
    localStorage.removeItem('token');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    this.dataStateService.likedProducts$.next(null);
    this.dataStateService.cardsInMyCart$.next(null);
    this.dataStateService.myCards$.next(null);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–∞–Ω–Ω—ã—Ö
    this.dataStateService.clearCache();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  clearUserData() {
    this.dataStateService.likedProducts$.next(null);
    this.dataStateService.cardsInMyCart$.next(null);
    this.dataStateService.myCards$.next(null);
    this.dataStateService.clearCache();
  }

  initializeGoogleAuth() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Auth —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    try {
      if (isPlatform('capacitor')) {
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.platform.ready().then(() => {
          console.log('Initializing Google Auth for Capacitor');
          GoogleAuth.initialize();
        });
      } else {
        // –î–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        console.log('Initializing Google Auth for Web');
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        setTimeout(() => {
          try {
            GoogleAuth.initialize();
          } catch (initError) {
            console.error('Error initializing Google Auth for Web:', initError);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –±–æ–ª—å—à–µ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
              try {
                GoogleAuth.initialize();
              } catch (retryError) {
                console.error('Retry failed for Google Auth initialization:', retryError);
              }
            }, 500);
          }
        }, 100);
      }
    } catch (error) {
      console.error('Error in initializeGoogleAuth:', error);
    }
  }

  async googleSignIn() {
    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ Google Auth –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (isPlatform('capacitor')) {
        await this.platform.ready();
      } else {
        // –î–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
      try {
        GoogleAuth.initialize();
      } catch (initError) {
        console.log('Google Auth already initialized or initialization failed:', initError);
      }
      
      const googleUser = await GoogleAuth.signIn();
      console.log("üîç ~ googleSignIn ~ parsifal/src/app/entities/auth/auth.service.ts:106 ~ googleUser:", googleUser);
      const googleAccessToken = googleUser?.authentication?.accessToken;
      
      if (!googleAccessToken) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Google');
      }
      
      return this.http
        .post<{ jwt: string }>(environment.base + 'users/google-auth/', {
          accessToken: googleAccessToken,
        })
        .pipe(
          tap((response) => {
            const jwt = response.jwt;
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.clearUserData();
            
            this.userState.token$.next(jwt);
            this.userState.me$.next(jwtDecode(jwt));
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
            this.userDataService.forceRefreshUserData().subscribe(() => {
              this.router.navigate(['tabs', 'all']);
            });
          })
        )
        .subscribe();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google:', error);
      throw error;
    }
  }

  async signInWithEmail(email: string, password: string): Promise<void> {
    return signInWithEmailAndPassword(this.auth, email, password).then(
      (userCredential) => {
        // You can handle user information here if needed
        const user = userCredential.user;
        console.log('User logged in:', user);
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.clearUserData();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userDataService.forceRefreshUserData().subscribe();
      }
    );
  }
}
